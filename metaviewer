#!/bin/sh

#version of the script
_VER_NUM=1.02
_VERSION="`basename ${0}` (version: $_VER_NUM)" 

#define main variables
_S="10.160.20.65,51261" #Test instance of SQL Server 2016
_U="mt_internal_user" #"mt_internal_user"	#sql server user
_P="se@lf0n1nt3rn@l" #"se@lf0n1nt3rn@l"	#password
_D=dw_motrpac			#database name

EXPECTED_ARGS="-r -i -f -h -v -d"
_HELP="\n$_VERSION
	\nPrerequisites: 'sqlcmd' application is required to run this script. To install 'sqlcmd', follow directions on this site: \nhttps://docs.microsoft.com/en-us/sql/linux/sql-server-linux-setup-tools?view=sql-server-2017
	\n\narguments usage: 
		\n\t[-v: report the version]
		\n\t[-h: help]
		\n\t[-d: debug version]
		\n\t[-r report identifier (optional) - expected values: metadata|dictionary|studystats (default: studystats)] 
		\n\t[-i study or dictionary id (optional): numeric (default: 1) 
		\n\t\tthis argument is required for 'metadata' and 'dictionary' reports (refer to '-r' argument); 'studystats' does not require this argument]
		\n\t[-f format (optional): sets delimiter for the output (default value is comma); accepts one character only
		\n\t\tIf this argument is omitted, native SQL Server output will be used]"

_NEXT="" #variable to handle name of the next variable being assigned
_PR="studystats"	#default value for query name
_PI="1"				#default value for id
_PF="" 				#default value for a delimiter; if "-f" argument is provided, comma "," will be set as default

#echo $2


#echo $*
#for PRM in $*
#do
#	echo $PRM
#done
#echo $#
#for PRM in $@
#do
#	echo "${PRM}" #$PRM
#done


#analyze received arguments
for PRM in $@
do
  #check if the provided named argument is expected
  if [ ${PRM:0:1} == "-" ] #check if this is the named argument
  then #echo "named argument $PRM"; fi
	  if [[ ! " $EXPECTED_ARGS " =~ .*\ $PRM\ .* ]]
	  then
		echo "Incorrect argument '$PRM' was supplied. Check below for the help information."
		echo -e $_HELP
		exit 0
	  fi
  fi
  
  case "$PRM" in
    -r) _NEXT="_PR";;
    -i) _NEXT="_PI";;
    -f) _NEXT="_PF"
		_PF="," #default value; if "-f" argument is provided, the default value is set to make sure that it is in place even if user did not specify the desired delimiter
    ;;
	-d) _PD="1";;
	-h) 
		echo -e $_HELP
		exit 0
	;;
	-v) 
		echo -e $_VERSION
		exit 0
	;;
    *)
		#echo "_NEXT=" $_NEXT
		case "$_NEXT" in
		   _PR) _PR="$PRM"; _NEXT="";;
		   _PI) _PI="$PRM"; _NEXT="";;
		   _PF) _PF="$PRM"; _NEXT="";;
		   *) _NEXT="";; #reset variable
		esac 
    ;;
  esac
done

#output values of arguments in debug mode
if [ "$_PD" == "1" ]; then
    echo "Report (-r): " $_PR
    echo "Id (-i): " $_PI
    echo "Format/Delimiter (-f):" $_PF
fi

#possible SQL scripts (metadata|dictionary|studystats)
_QR=""
_Q_METADATA="EXEC usp_get_metadata @study_id = {{study_id}};"
_Q_METADATA_MULTI_IDS="EXEC usp_get_metadata_studies_combined @study_ids = '{{study_id}}';"
_Q_DICTIONARY="EXEC usp_get_dictionary @dict_id = {{study_id}};"
_Q_STUDYSTATS="Set nocount on; Select * from vw_get_study_stats;"

_PL_HLDR_STUDYID="{{study_id}}"

#controls format of the output
if [ "$_PF" != "" ]
then
  _DELIM_FMT="-W -w 4000 -s $_PF"
  _RMV_2ND_LINE=" | sed '2d'"
else
  _DELIM_FMT=""
  _RMV_2ND_LINE=""
fi

#echo "_DELIM_FMT = " $_DELIM_FMT #for testing only


case $_PR in
   metadata) #_QR=$_Q_METADATA
		#check if PI contains multiple comma separated IDs 
		IFS=',' read -ra IDS <<< "$_PI"
		if [ "${#IDS[@]}" -gt 1 ]
		then
			_QR=$_Q_METADATA_MULTI_IDS
		else
			_QR=$_Q_METADATA
		fi
   
   ;;
   dictionary) _QR=$_Q_DICTIONARY;;
   studystats) _QR=$_Q_STUDYSTATS;;
   *) 
	 #report argument was not recognized             
	 echo "Value of the '-r' argument ('$_PR') was not recognized. Aborting execution. Check below for the help information."
	 echo -e $_HELP
	 exit 0
	 ;;
esac 

#update _QR variable by substituting study_id place holder with the actual study_id supplied as a argument
_QR=${_QR//$_PL_HLDR_STUDYID/$_PI}

if [ "$_PD" == "1" ]; then
	echo "_QR = " $_QR #for testing only
fi
#exit 0 #for testing only

_SQLCMD='sqlcmd -S $_S -U $_U -P $_P -d $_D -Q "$_QR" $_DELIM_FMT'  # -W -w 4000 -s , 
#echo $_SQLCMD #for testing only
eval ${_SQLCMD} ${_RMV_2ND_LINE}


